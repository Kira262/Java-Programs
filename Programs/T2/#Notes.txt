Constructor

- A special method in class.
- When object created constructor automatically called.
- Constructor should have same name as class name.
- Constructor does not have any return,  type not even void.
- Constructor is used to initialize the instance variables.
- Simple Block will run before the Constructor block Always.
- Types: 1) Default 2) Parametered 3) Copy

-Syntax:

class t2_fourteen {
    public static void main(String[] args) {
        Test obj = new Test();
    }
}


class Test {
    Test() {
        System.out.println("A COnstructor");
    }
}


Static Keyword
-Variable -Method -Block -Nested Class


Static Method:
- Belongs to Class  
- Can be accessed without creating a class
- Can access static data directly 


Limitations: Static inside Static only



THIS keyword 
=>It refers to current class object.

Uses:
- current class instance
- current class method
- current class constructor
- Passed as an argument
- return of current class instance
- Access instance variables



Inheritance
=> MEchanism in which one object aquires all properties and behaviour of another object

- Class can be :> 1) Parent / Super Class 2) Child / Sub Class
- New class can reuse methods and variables
- Method overrides, super , final

-Syntax:
class sub-class extends super-class{}

Types:
1) Single 2) Multi-Level 3) Hierarchical 



Super Keyword
=> Only possible in Parent, Child

Uses:
- to refer immediate parent classs object.
- to invoke/call immediate parent class
- to invoke Parent class constructor



Final Keyword
- To restrict user
- Value cannot be changed

Applied to -> Variable, Method CLass



Access Specifier
- Public

- Private:Private can be used in variable and method but a class cannot be private.The visibility of private method or variable is within a class only.

- Protected: Can be used in method and variables. A class cannot be protected. Protected method and variables can be accessed un same file and  different file under same packages, but they are not visible in different files under different packages.Protected methods or variables can be accessed in different files under different packages using inheritance only.  

- Default:A class method or variable can be default. If do not mention any excess modifier then it will be considered as default.
A default  class variable or method is visible in same file or different file but under the same packaage. Default class variable or method is not visible in different file under different packages.